<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <title>Balance the Ecosystem – Interactive Simulator</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <!-- Chart.js CDN -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.4/dist/chart.umd.min.js"></script>
  <style>
    :root{
      --bg:#ffffff; --ink:#1f2937; --muted:#6b7280; --panel:#f8fafc; --border:#e5e7eb; --accent:#111827;
    }
    *{box-sizing:border-box}
    body{margin:0;background:var(--bg);color:var(--ink);font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,"Noto Sans",sans-serif;line-height:1.35}
    .wrap{max-width:1100px;margin:0 auto;padding:20px}
    h1{font-size:1.75rem;margin:0 0 4px}
    .sub{color:var(--muted);font-size:.95rem;margin-bottom:16px}
    .toolbar{display:flex;gap:8px;flex-wrap:wrap}
    button{border:1px solid var(--border);background:#fff;padding:8px 12px;border-radius:12px;cursor:pointer;box-shadow:0 1px 2px rgba(0,0,0,.04)}
    button:hover{background:#f3f4f6}
    .grid{display:grid;grid-template-columns:1fr;gap:16px}
    @media(min-width:940px){.grid{grid-template-columns: 360px 1fr}}
    .card{background:var(--panel);border:1px solid var(--border);border-radius:16px;padding:14px}
    .label{font-weight:600;margin-bottom:8px}
    .row{display:flex;align-items:center;gap:10px;margin:8px 0}
    .row .name{width:210px;font-size:.9rem}
    .row input[type=range]{flex:1}
    .value{width:64px;text-align:right;font-variant-numeric:tabular-nums;font-size:.8rem;color:var(--muted)}
    .presets{display:flex;flex-wrap:wrap;gap:8px;margin-top:8px}
    .muted{color:var(--muted);font-size:.85rem}
    .kpi{display:flex;align-items:center;gap:10px}
    .bar{flex:1;height:12px;border:1px solid var(--border);border-radius:999px;overflow:hidden;background:#fff}
    .bar > div{height:100%;background:var(--accent);transition:width .2s ease}
    .small{font-size:.8rem;color:var(--muted)}
    .cols-3{display:grid;gap:12px}
    @media(min-width:900px){.cols-3{grid-template-columns: repeat(3, 1fr)}}
    .list{margin:0;padding-left:18px}
    canvas{max-height:360px}
    .code{font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace;font-size:.78rem}
  </style>
</head>
<body>
  <div class="wrap">
    <header>
      <h1>Balance the Ecosystem</h1>
      <div class="sub">Adjust resources and human impact. Observe prey–predator dynamics and ecosystem health.</div>
      <div class="toolbar">
        <button id="startPauseBtn">Start</button>
        <button id="stepBtn">Step</button>
        <button id="resetBtn">Reset</button>
      </div>
    </header>

    <main class="grid">
      <!-- Controls -->
      <section class="card">
        <div class="label">Controls</div>

        <div class="row">
          <div class="name">Sunlight (resource)</div>
          <input id="sunlight" type="range" min="0" max="100" step="1" value="80" />
          <div class="value" id="sunlightVal">80</div>
        </div>

        <div class="row">
          <div class="name">Water (resource)</div>
          <input id="water" type="range" min="0" max="100" step="1" value="70" />
          <div class="value" id="waterVal">70</div>
        </div>

        <div class="row">
          <div class="name">Pollution (human impact)</div>
          <input id="pollution" type="range" min="0" max="100" step="1" value="5" />
          <div class="value" id="pollutionVal">5</div>
        </div>

        <hr style="border:none;border-top:1px solid var(--border);margin:12px 0" />

        <div class="row">
          <div class="name">Prey initial (reset)</div>
          <input id="prey0" type="range" min="0" max="200" step="1" value="60" />
          <div class="value" id="prey0Val">60</div>
        </div>

        <div class="row">
          <div class="name">Predator initial (reset)</div>
          <input id="pred0" type="range" min="0" max="200" step="1" value="18" />
          <div class="value" id="pred0Val">18</div>
        </div>

        <hr style="border:none;border-top:1px solid var(--border);margin:12px 0" />

        <div class="row">
          <div class="name">Sim speed (ms/step)</div>
          <input id="speed" type="range" min="40" max="400" step="10" value="120" />
          <div class="value" id="speedVal">120</div>
        </div>

        <div class="presets" id="presets"></div>

        <div class="muted" style="margin-top:10px">
          <div><strong>Model:</strong> logistic prey + predation with environmental modifiers.</div>
          <div><strong>Teaching idea:</strong> Start balanced → raise pollution; discuss carrying capacity (K) and density dependence.</div>
        </div>
      </section>

      <!-- Charts & Health -->
      <section class="card">
        <div style="display:flex;justify-content:space-between;align-items:center;margin-bottom:6px">
          <div class="label" style="margin:0">Populations over Time</div>
          <div class="small">t = <span id="tval">0.0</span> | K<sub>eff</sub> ≈ <span id="keff">—</span></div>
        </div>
        <canvas id="chart" aria-label="Prey and predator populations over time"></canvas>

        <div class="kpi" style="margin-top:12px">
          <div class="label" style="margin:0">Ecosystem Health</div>
          <div class="bar"><div id="healthFill" style="width:0%"></div></div>
          <div class="small"><span id="healthText">0</span>/100</div>
        </div>

        <div class="card" style="margin-top:12px">
          <div class="label" style="margin:0 0 6px">Guided Prompts</div>
          <ul class="list">
            <li>Increase pollution to 60. What happens to predators first? Why?</li>
            <li>Lower water to 20. Watch K<sub>eff</sub>. How does prey respond compared to predators?</li>
            <li>Use “Overhunting Predators”, then restore predators. How does the system recover?</li>
          </ul>
        </div>
      </section>
    </main>

    <!-- Reference -->
    <section class="cols-3" style="margin-top:16px">
      <div class="card">
        <div class="label">Equation Reference</div>
        <div class="code">prey(t+Δt) = prey + [ r·s · prey · (1 − prey/K_eff) − a·pred·prey ] · Δt</div>
        <div class="code">pred(t+Δt) = pred + [ b·a·pred·prey − ( m + polMort )·pred ] · Δt</div>
      </div>
      <div class="card">
        <div class="label">Variables</div>
        <div class="small">
          r: prey growth, a: predation, b: conversion, m: mortality,<br/>
          K_eff: carrying capacity, s: prey stress factor
        </div>
      </div>
      <div class="card">
        <div class="label">Faith & Stewardship (optional)</div>
        <div class="small"><em>“The earth is the LORD’s…” (Ps 24:1)</em> — wise choices (lower pollution, restore predators) reflect stewardship.</div>
      </div>
    </section>
  </div>

  <script>
    // Utility
    const clamp = (x, lo=0, hi=1e9) => Math.max(lo, Math.min(hi, x));

    // Parameters & State
    let sunlight = 80;
    let water = 70;
    let pollution = 5;

    let prey = 60;   // rabbits
    let pred = 18;   // foxes

    const dt = 0.1;
    const r = 0.7;
    const a = 0.004;
    const b = 0.12;
    const m = 0.22;
    const K_base = 220;

    let time = 0;
    let timer = null;
    let speedMs = 120;

    const MAX_POINTS = 360;

    // DOM helpers
    const el = id => document.getElementById(id);

    const inputs = {
      sunlight: el('sunlight'),
      water: el('water'),
      pollution: el('pollution'),
      prey0: el('prey0'),
      pred0: el('pred0'),
      speed: el('speed')
    };

    const vals = {
      sunlight: el('sunlightVal'),
      water: el('waterVal'),
      pollution: el('pollutionVal'),
      prey0: el('prey0Val'),
      pred0: el('pred0Val'),
      speed: el('speedVal'),
      tval: el('tval'),
      keff: el('keff'),
      healthText: el('healthText'),
      healthFill: el('healthFill')
    };

    const startPauseBtn = el('startPauseBtn');
    const stepBtn = el('stepBtn');
    const resetBtn = el('resetBtn');
    const presetsWrap = el('presets');

    // Scenarios
    const SCENARIOS = [
      { name: 'Balanced Prairie',      params: { sunlight:80, water:70, pollution:5,  prey0:60, pred0:18 }},
      { name: 'Drought Year',          params: { sunlight:85, water:25, pollution:10, prey0:40, pred0:12 }},
      { name: 'Runoff & Pollution',    params: { sunlight:70, water:75, pollution:45, prey0:55, pred0:15 }},
      { name: 'Overhunting Predators', params: { sunlight:80, water:70, pollution:5,  prey0:60, pred0:6  }}
    ];

    SCENARIOS.forEach(s => {
      const b = document.createElement('button');
      b.textContent = s.name;
      b.addEventListener('click', () => reset(s.params));
      presetsWrap.appendChild(b);
    });

    // Chart
    const ctx = document.getElementById('chart').getContext('2d');
    const chart = new Chart(ctx, {
      type: 'line',
      data: {
        datasets: [
          { label: 'Prey', data: [], borderWidth: 2, pointRadius: 0 },
          { label: 'Predators', data: [], borderWidth: 2, pointRadius: 0 },
          { label: 'K_eff', data: [], borderWidth: 1.5, pointRadius: 0, borderDash: [5,5] }
        ]
      },
      options: {
        animation: false,
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          x: { type: 'linear', title: { display:true, text:'time' }, ticks: { maxTicksLimit: 8 } },
          y: { beginAtZero: true }
        },
        plugins: {
          legend: { labels: { boxWidth: 12 } },
          tooltip: { mode: 'nearest', intersect: false }
        },
        elements: { line: { tension: 0.25 } }
      }
    });

    function pushPoint(t, preyVal, predVal, kEff) {
      const push = (ds, x, y) => {
        ds.data.push({ x, y });
        if (ds.data.length > MAX_POINTS) ds.data.shift();
      };
      push(chart.data.datasets[0], t, preyVal);
      push(chart.data.datasets[1], t, predVal);
      push(chart.data.datasets[2], t, kEff);
      chart.update();
    }

    function clearChart() {
      chart.data.datasets.forEach(d => d.data = []);
      chart.update();
    }

    // Environment & Health
    function envModifiers() {
      const resFactor = (0.35 + 0.65*(sunlight/100) * (0.6 + 0.4*(water/100)));
      const polFactor = 1 - 0.7*(pollution/100);
      const K_eff = clamp(K_base * resFactor * polFactor, 30, 600);
      const polMort = 0.15*(pollution/100);
      const preyStress = 1 - 0.25*(pollution/100);
      return { K_eff, polMort, preyStress };
    }

    function healthIndex(K_eff) {
      const diversity = Math.max(0, 1 - Math.abs(prey - pred)/(prey + pred + 1));
      const headroom = Math.max(0, 1 - Math.max(0, (prey - K_eff))/K_eff);
      const pol = 1 - (pollution/100);
      const raw = 100 * (0.45*diversity + 0.35*headroom + 0.20*pol);
      return clamp(raw, 0, 100);
    }

    // Simulation Step
    function step() {
      const env = envModifiers();
      const dPrey = (r * env.preyStress) * prey * (1 - prey/env.K_eff) - a * pred * prey;
      const dPred = b * a * pred * prey - (m + env.polMort) * pred;

      const prey1 = clamp(prey + dPrey * dt, 0, 5000);
      const pred1 = clamp(pred + dPred * dt, 0, 5000);

      prey = prey1;
      pred = pred1;
      time = +(time + dt).toFixed(1);

      const H = healthIndex(env.K_eff);

      vals.tval.textContent = time.toFixed(1);
      vals.keff.textContent = env.K_eff.toFixed(0);
      vals.healthText.textContent = Math.round(H);
      vals.healthFill.style.width = `${H}%`;

      pushPoint(time, +prey.toFixed(1), +pred.toFixed(1), +env.K_eff.toFixed(1));
    }

    // Controls wiring
    function wireSlider(key, setter) {
      inputs[key].addEventListener('input', e => {
        const v = Number(e.target.value);
        vals[key].textContent = v;
        setter(v);
      });
    }

    wireSlider('sunlight', v => sunlight = v);
    wireSlider('water',    v => water = v);
    wireSlider('pollution',v => pollution = v);
    wireSlider('prey0',    v => prey = v);
    wireSlider('pred0',    v => pred = v);
    wireSlider('speed',    v => { speedMs = v; if (timer){ clearInterval(timer); timer = setInterval(step, speedMs); }});

    startPauseBtn.addEventListener('click', () => {
      if (timer) {
        clearInterval(timer); timer = null; startPauseBtn.textContent = 'Start';
      } else {
        timer = setInterval(step, speedMs); startPauseBtn.textContent = 'Pause';
      }
    });

    stepBtn.addEventListener('click', step);

    resetBtn.addEventListener('click', () => reset());

    function reset(preset) {
      sunlight = preset?.sunlight ?? Number(inputs.sunlight.value);
      water    = preset?.water    ?? Number(inputs.water.value);
      pollution= preset?.pollution?? Number(inputs.pollution.value);
      prey     = preset?.prey0    ?? Number(inputs.prey0.value);
      pred     = preset?.pred0    ?? Number(inputs.pred0.value);

      if (preset){
        inputs.sunlight.value = sunlight; vals.sunlight.textContent = sunlight;
        inputs.water.value = water;       vals.water.textContent = water;
        inputs.pollution.value = pollution; vals.pollution.textContent = pollution;
        inputs.prey0.value = prey;        vals.prey0.textContent = prey;
        inputs.pred0.value = pred;        vals.pred0.textContent = pred;
      }

      time = 0;
      vals.tval.textContent = '0.0';
      clearChart();
      const env = envModifiers();
      vals.keff.textContent = env.K_eff.toFixed(0);
      const H = healthIndex(env.K_eff);
      vals.healthText.textContent = Math.round(H);
      vals.healthFill.style.width = `${H}%`;
    }

    // Initialize
    reset({ sunlight:80, water:70, pollution:5, prey0:60, pred0:18 });
  </script>
</body>
</html>
